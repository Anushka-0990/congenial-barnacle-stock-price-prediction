# ðŸ“ˆ Stock Price Prediction using ML

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load stock data
stock = yf.download("AAPL", start="2020-01-01", end="2023-12-31")
df = stock[['Close']].copy()

# Feature engineering
df['5_MA'] = df['Close'].rolling(window=5).mean()
df['10_MA'] = df['Close'].rolling(window=10).mean()
df.dropna(inplace=True)

# Target: Predict next day's Close
df['Target'] = df['Close'].shift(-1)
df.dropna(inplace=True)

# Features and labels
X = df[['Close', '5_MA', '10_MA']]
y = df['Target']

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Model 1: Linear Regression
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Model 2: Random Forest
from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

# Evaluation
from sklearn.metrics import r2_score
print("Linear Regression RÂ²:", r2_score(y_test, y_pred_lr))
print("Random Forest RÂ²:", r2_score(y_test, y_pred_rf))

# Plot predictions
plt.figure(figsize=(10,5))
plt.plot(y_test.index, y_test, label='Actual')
plt.plot(y_test.index, y_pred_lr, label='Linear Predicted')
plt.plot(y_test.index, y_pred_rf, label='RF Predicted')
plt.title("Stock Price Prediction")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.grid(True)
plt.show()
